sort(ctm_posterior_terms, decreasing=TRUE)[1:10]
ctm_posterior_topN_terms_by_topic[1,] <- sort(ctm_posterior_terms, decreasing=TRUE)[1:10] #top 10 terms
head(ctmposterior)
head(ctmposterior[1])
head(ctmposterior[2])
ctm <- CTM(matrix, k = 2)
ctm_posterior <- posterior(ctm) #gets posterior probabilities
ctm_posterior_terms <- exp(ctm_posterior$terms[1,])-1 #posterior probabilities of terms for topic #1 across all words, exponentiated and normalized
ctm_posterior_topN_terms_by_topic <- sort(ctm_posterior_terms, decreasing=TRUE)[1:10] #top 10 terms
ctm_posterior$terms
ctm_posterior$terms[0]
ctm_posterior$terms[1]
ctm_posterior$terms[2]
ctm_posterior$terms[3]
ctm_posterior$terms
names(ctm_posterior$terms)
ctm_posterior$terms
ctm_posterior$terms[1]
ctm_posterior$terms[1:3]
ctm_posterior$terms[[1]]
ctm_posterior$terms[[1:10]]
ctm_posterior$terms(1)
ctm_posterior$terms
ctm_posterior$terms{1}
ctm_posterior$terms(1:10)
ctm_posterior$terms[(]1:10]
ctm_posterior$terms[[(]]1:10]
ctm_posterior$terms[1:10]
head(ctm_posterior$terms)
class(ctm_posterior$terms)
about(ctm_posterior$terms)
colnames(ctm_posterior$terms)
colnames(ctm_posterior$terms)=="heroin"
colnames(ctm_posterior$terms)=="zero"
colnames(ctm_posterior$terms)==termtosearch
termtosearch <- "zero" #make this heroin
colnames(ctm_posterior$terms)==termtosearch
find(colnames(ctm_posterior$terms)==termtosearch)
colnames(ctm_posterior$terms)==termtosearch
ctm_posterior$terms[1]
ctm_posterior$terms
ctm_posterior$terms[colnames(ctm_posterior$terms)==termtosearch]
ctm_posterior$terms
ctm_posterior$terms
ctm_posterior$terms[colnames(ctm_posterior$terms)==termtosearch]
termtosearch
ctm_posterior$terms[1]
head(ctm_posterior$terms)
colnames(ctm_posterior$terms)
ctm_posterior_terms <- exp(ctm_posterior$terms[1,])-1
colnameS(ctm_posterior_terms)
ctm_posterior_terms <- exp(ctm_posterior$terms[1,])-1
ctm_posterior_terms
colnames(ctm_posterior_terms)
numTopics <- 2
ctm <- CTM(matrix, k = numTopics)
#find top N terms for each topic
topNterms <- 10
ctm_posterior <- posterior(ctm) #gets posterior probabilities
for (topic in 1:numTopics){
ctm_posterior_terms <- exp(ctm_posterior$terms[topic,])-1 #convert from log space
a <- sort(ctm_posterior_terms, decreasing=TRUE)[1:topNterms]
}
numTopics
numTopics[1]
matrix <- create_matrix(data$Subject, language="english", removeNumbers=TRUE, stemWords=TRUE, weighting=weightTf)
#Run CTM with number of topics pre-specified
numTopics <- 2
ctm <- CTM(matrix, k = numTopics)
ctm <- CTM(matrix, k = 2)
ctm <- NULL
ctm <- CTM(matrix, k = numTopics)
#load corpus
data("NYTimes", package = "RTextTools")
data <- NYTimes[sample(1:3100,size=1000,replace=FALSE),]
#create the matrix for the CTM
matrix <- create_matrix(data$Subject, language="english", removeNumbers=TRUE, stemWords=TRUE, weighting=weightTf)
#Run CTM with number of topics pre-specified
numTopics <- 2
ctm <- CTM(matrix, k = numTopics)
topNterms <- 10
ctm_posterior <- posterior(ctm) #gets posterior probabilities
for (topic in 1:numTopics){
ctm_posterior_terms <- exp(ctm_posterior$terms[topic,])-1 #convert from log space
a <- sort(ctm_posterior_terms, decreasing=TRUE)[1:topNterms]
}
a
class(a)
topterms_by_topic[topic] <- sort(ctm_posterior_terms, decreasing=TRUE)[1:topNterms]
topterms_by_topic <- NULL
topterms_by_topic[topic] <- sort(ctm_posterior_terms, decreasing=TRUE)[1:topNterms]
topterms_by_topic[1:numTopics] <- NULL
topterms_by_topic[1:numTopics] <- 0
for (topic in 1:numTopics){
ctm_posterior_terms <- exp(ctm_posterior$terms[topic,])-1 #convert from log space
topterms_by_topic[topic] <- sort(ctm_posterior_terms, decreasing=TRUE)[1:topNterms]
}
topterms_by_topic
topic
sort(ctm_posterior_terms, decreasing=TRUE)[1:topNterms]
class(sort(ctm_posterior_terms, decreasing=TRUE)[1:topNterms])
topterms_by_topic <- data.frame()
sort(ctm_posterior_terms, decreasing=TRUE)[1:topNterms]
colnames(sort(ctm_posterior_terms, decreasing=TRUE)[1:topNterms])
rownames(sort(ctm_posterior_terms, decreasing=TRUE)[1:topNterms])
names(sort(ctm_posterior_terms, decreasing=TRUE)[1:topNterms])
topterms_by_topic$terms[1:topNterms] <- names(sort(ctm_posterior_terms, decreasing=TRUE)[1:topNterms])
topterms_by_topic
data.frame()
topterms_by_topic$terms <- NULL
topterms_by_topic$terms <- rbind(topterms_by_topic$terms,names(sort(ctm_posterior_terms, decreasing=TRUE)[1:topNterms]))
topterms_by_topic
topterms_by_topic$terms
names(sort(ctm_posterior_terms, decreasing=TRUE)[1:topNterms])
topterms_by_topic$terms <- names(sort(ctm_posterior_terms, decreasing=TRUE)[1:topNterms])
topterms_by_topic$terms <- names(sort(ctm_posterior_terms, decreasing=TRUE)[1:topNterms]))
topterms_by_topic$terms <- names(sort(ctm_posterior_terms, decreasing=TRUE)[1:topNterms])
topterms_by_topic <- NULL
topterms_by_topic$terms <- names(sort(ctm_posterior_terms, decreasing=TRUE)[1:topNterms])
topterms_by_topic
topterms_by_topic$terms <- rbind(topterms_by_topic$terms,names(sort(ctm_posterior_terms, decreasing=TRUE)[1:topNterms]))
topterms_by_topic
topterms_by_topic$terms <- cbind(topterms_by_topic$terms,names(sort(ctm_posterior_terms, decreasing=TRUE)[1:topNterms]))
topterms_by_topic
topterms_by_topic <- NULL
topterms_by_topic <- NULL
topterms_by_topic
topterms_by_topic$terms <- rbind(topterms_by_topic$terms,names(sort(ctm_posterior_terms, decreasing=TRUE)[1:topNterms]))
topterms_by_topic
topterms_by_topic <- NULL
topterms_by_topic$terms <- cbind(topterms_by_topic$terms,names(sort(ctm_posterior_terms, decreasing=TRUE)[1:topNterms]))
topterms_by_topic
sort(ctm_posterior_terms, decreasing=TRUE)[1:topNterms])
sort(ctm_posterior_terms, decreasing=TRUE)[1:topNterms]
sort(ctm_posterior_terms, decreasing=TRUE)[1:topNterms][1]
sort(ctm_posterior_terms, decreasing=TRUE)[1:topNterms]
values(sort(ctm_posterior_terms, decreasing=TRUE)[1:topNterms])
sort(ctm_posterior_terms, decreasing=TRUE)[1:topNterms]
sort(ctm_posterior_terms, decreasing=TRUE)[1:topNterms][1]
sort(ctm_posterior_terms, decreasing=TRUE)[1:topNterms]
class(sort(ctm_posterior_terms, decreasing=TRUE)[1:topNterms])
sort(ctm_posterior_terms, decreasing=TRUE)[1:topNterms]
a <- sort(ctm_posterior_terms, decreasing=TRUE)[1:topNterms]
edit(a)
a[1]
a[1.]
a[1,]
a[[1]
]
a[[]]
a[[,]]
a[[:]]
a[:]
a(:)
a
a[1:10]
a[1:10,1]
a[1:10]
a[1]
a[1:10]
a[[1:10]]
a[1]
a[1](1)
a[1]
class(a[1])
sort(ctm_posterior_terms, decreasing=TRUE)[1:topNterms]
sort(ctm_posterior_terms, decreasing=TRUE)[1:topNterms][1]
sort(ctm_posterior_terms, decreasing=TRUE)[1:topNterms]
?names
topterms_by_topic$probs <- cbind(topterms_by_topic$probs,sort(ctm_posterior_terms, decreasing=TRUE)[1:topNterms])
topterms_by_topic
#find top N terms for each topic
topNterms <- 10
ctm_posterior <- posterior(ctm)
topterms_by_topic <- NULL
for (topic in 1:numTopics){
ctm_posterior_terms <- exp(ctm_posterior$terms[topic,])-1 #convert from log space
topterms_by_topic$terms <- cbind(topterms_by_topic$terms,names(sort(ctm_posterior_terms, decreasing=TRUE)[1:topNterms]))
topterms_by_topic$probs <- cbind(topterms_by_topic$probs,sort(ctm_posterior_terms, decreasing=TRUE)[1:topNterms])
}
topterms_by_topic
?cbind
#Run CTM with number of topics pre-specified
numTopics <- 1
ctm <- CTM(matrix, k = numTopics)
#find top N terms for each topic
topNterms <- 10
ctm_posterior <- posterior(ctm)
topterms_by_topic <- NULL
for (topic in 1:numTopics){
ctm_posterior_terms <- exp(ctm_posterior$terms[topic,])-1 #convert from log space
topterms_by_topic$terms <- cbind(topterms_by_topic$terms,names(sort(ctm_posterior_terms, decreasing=TRUE)[1:topNterms]))
topterms_by_topic$probs <- cbind(topterms_by_topic$probs,sort(ctm_posterior_terms, decreasing=TRUE)[1:topNterms],make.row.names = FALSE)
}
#Run CTM with number of topics pre-specified
numTopics <- 3
ctm <- CTM(matrix, k = numTopics)
#find top N terms for each topic
topNterms <- 10
ctm_posterior <- posterior(ctm)
topterms_by_topic <- NULL
for (topic in 1:numTopics){
ctm_posterior_terms <- exp(ctm_posterior$terms[topic,])-1 #convert from log space
topterms_by_topic$terms <- cbind(topterms_by_topic$terms,names(sort(ctm_posterior_terms, decreasing=TRUE)[1:topNterms]))
topterms_by_topic$probs <- cbind(topterms_by_topic$probs,sort(ctm_posterior_terms, decreasing=TRUE)[1:topNterms],make.row.names = FALSE)
}
topterms_by_topic
ctm_posterior_terms <- exp(ctm_posterior$terms[topic,])-1 #convert from log space
topterms_by_topic$terms <- cbind(topterms_by_topic$terms,names(sort(ctm_posterior_terms, decreasing=TRUE)[1:topNterms]))
topterms_by_topic$probs <- cbind(topterms_by_topic$probs,sort(ctm_posterior_terms, decreasing=TRUE)[1:topNterms])
topterms_by_topic
#Install necessary pacakges
list.of.packages <- c("topicmodels","RTextTools","lasso2")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
lapply(list.of.packages, require, character.only = TRUE)
#load corpus
data("NYTimes", package = "RTextTools")
data <- NYTimes[sample(1:3100,size=1000,replace=FALSE),]
#create the matrix for the CTM
matrix <- create_matrix(data$Subject, language="english", removeNumbers=TRUE, stemWords=TRUE, weighting=weightTf)
#Run CTM with number of topics pre-specified
numTopics <- 3
ctm <- CTM(matrix, k = numTopics)
#find top N terms for each topic
topNterms <- 10
ctm_posterior <- posterior(ctm)
topterms_by_topic <- NULL
for (topic in numTopics:1){
ctm_posterior_terms <- exp(ctm_posterior$terms[topic,])-1 #convert from log space
topterms_by_topic$terms <- cbind(topterms_by_topic$terms,names(sort(ctm_posterior_terms, decreasing=TRUE)[1:topNterms]))
topterms_by_topic$probs <- cbind(topterms_by_topic$probs,sort(ctm_posterior_terms, decreasing=TRUE)[1:topNterms])
}
topterms_by_topic
names(topterms_by_topic$probs)
rownames(topterms_by_topic$probs)
rownames(topterms_by_topic$probs) <- NULL
topterms_by_topic
termtosearch <- "bush" #make this heroin
topterms_by_topic$terms==termtosearch
col(topterms_by_topic)
col(topterms_by_topic$terms==termtosearch)
topterms_by_topic[topterms_by_topic$terms==termtosearch]
topterms_by_topic$terms==termtosearch
which(topterms_by_topic$terms==termtosearch)
termtosearch <- "campaign" #make this heroin
topterms_by_topic$terms==termtosearch
which(topterms_by_topic$terms==termtosearch)
column(which(topterms_by_topic$terms==termtosearch))
?col
col(topterms_by_topic)
col(which(topterms_by_topic$terms==termtosearch))
col(topterms_by_topic$terms==termtosearch)
which(topterms_by_topic$terms==termtosearch)
topterms_by_topic$terms[which(topterms_by_topic$terms==termtosearch)]
col(topterms_by_topic$terms[which(topterms_by_topic$terms==termtosearch)])
topterms_by_topic$terms[which(topterms_by_topic$terms==termtosearch)]
which(topterms_by_topic$terms==termtosearch)
?which
which(topterms_by_topic$terms==termtosearch,arr.ind = TRUE)
which(topterms_by_topic$terms==termtosearch,arr.ind = TRUE)[,2]
critical_term <- "campaign" #make this heroin
critical_term_topicno <- which(topterms_by_topic$terms==critical_term,arr.ind = TRUE)[,2]
critical_term_topicno
which(topterms_by_topic$terms==critical_term,arr.ind = TRUE)[,2]
which(topterms_by_topic$terms==critical_term,arr.ind = TRUE)[,2][:]
which(topterms_by_topic$terms==critical_term,arr.ind = TRUE)[[],2]]
which(topterms_by_topic$terms==critical_term,arr.ind = TRUE)[[,2]]
which(topterms_by_topic$terms==critical_term,arr.ind = TRUE)[,2]
class(which(topterms_by_topic$terms==critical_term,arr.ind = TRUE)[,2])
which(topterms_by_topic$terms==critical_term,arr.ind = TRUE)[,2]
which(topterms_by_topic$terms==critical_term,arr.ind = TRUE)[,2]+0
which(topterms_by_topic$terms==critical_term,arr.ind = TRUE)[,2]+1
which(topterms_by_topic$terms==critical_term,arr.ind = TRUE)[,2]
critical_term_topicno+1
#Install necessary pacakges
list.of.packages <- c("topicmodels","RTextTools")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
lapply(list.of.packages, require, character.only = TRUE)
#user-specified parameters
numTopics <- 3
critical_term <- "campaign" #make this heroin
topNterms <- 10
#load corpus
data("NYTimes", package = "RTextTools")
edit(NYTimes)
data <- read.csv('opiates_comments_11-16-15_more.csv')
?read.csv
data <- read.csv('opiates_comments_11-16-15_more.csv')
wd
setwf
setwd()
getwd
getwd()
setwd('C:\Users\CHATHC01\Documents\D3Project\Spivack\Tasks\Stimscrape'')
setwd('C:\Users\CHATHC01\Documents\D3Project\Spivack\Tasks\Stimscrape)
setwd('C:/Users/CHATHC01/Documents/D3Project/Spivack/Tasks/Stimscrape)
setwd('C:/Users/CHATHC01/Documents/D3Project/Spivack/Tasks/Stimscrape')
data <- read.csv('opiates_comments_11-16-15_more.csv')
edit(data)
#Install necessary pacakges
list.of.packages <- c("topicmodels","RTextTools")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
lapply(list.of.packages, require, character.only = TRUE)
#user-specified parameters
numTopics <- 3
critical_term <- "campaign" #make this heroin
topNterms <- 10
#load corpus
#data("NYTimes", package = "RTextTools")
#data <- NYTimes[sample(1:3100,size=1000,replace=FALSE),]
setwd('C:/Users/CHATHC01/Documents/D3Project/Spivack/Tasks/Stimscrape')
data <- read.csv('opiates_comments_11-16-15_more.csv')
#create the matrix for the CTM
matrix <- create_matrix(data$comments, language="english", removeNumbers=TRUE, stemWords=TRUE, weighting=weightTf)
matrix <- create_matrix(data$comments, language="english", removeNumbers=TRUE, stemWords=TRUE)
ctm <- CTM(matrix, k = numTopics)
#find top N terms for each topic
ctm_posterior <- posterior(ctm)
topterms_by_topic <- NULL
for (topic in numTopics:1){ #go in reverse order so first column in topterms_by_topic will correspond to the first topic
ctm_posterior_terms <- exp(ctm_posterior$terms[topic,])-1 #convert from log space
topterms_by_topic$terms <- cbind(topterms_by_topic$terms,names(sort(ctm_posterior_terms, decreasing=TRUE)[1:topNterms]))
topterms_by_topic$probs <- cbind(topterms_by_topic$probs,sort(ctm_posterior_terms, decreasing=TRUE)[1:topNterms])
}
rownames(topterms_by_topic$probs) <- NULL #nullify the misleading row names
#find heroin topic number
critical_term_topicno <- which(topterms_by_topic$terms==critical_term,arr.ind = TRUE)[,2]
ctm <- CTM(matrix, k = numTopics)
edit(matrix)
edit(data$comments)
edit(data)
data("NYTimes", package = "RTextTools")
data <- NYTimes[sample(1:3100,size=1000,replace=FALSE),]
data$Subject
data <- read.csv('opiates_comments_11-16-15_more.csv')
data$comments
head(data$comments)
data("NYTimes", package = "RTextTools")
temp <- NYTimes[sample(1:3100,size=1000,replace=FALSE),]
temp$Subject
head(temp$Subject)
head(data$comments)
data <- temp
matrix <- create_matrix(data$comments, language="english", removeNumbers=TRUE, stemWords=TRUE)
data("NYTimes", package = "RTextTools")
data <- NYTimes[sample(1:3100,size=1000,replace=FALSE),]
matrix <- create_matrix(data$comments, language="english", removeNumbers=TRUE, stemWords=TRUE, weighting=weightTf)
#Install necessary packages
list.of.packages <- c("topicmodels","RTextTools")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
lapply(list.of.packages, require, character.only = TRUE)
#user-specified parameters
numTopics <- 3
critical_term <- "campaign" #make this heroin
topNterms <- 10
#load corpus
data("NYTimes", package = "RTextTools")
data <- NYTimes[sample(1:3100,size=1000,replace=FALSE),]
matrix <- create_matrix(data$comments, language="english", removeNumbers=TRUE, stemWords=TRUE, weighting=weightTf)
temp <- data
data <- read.csv('opiates_comments_11-16-15_more.csv')
matrix <- create_matrix(data$comments, language="english", removeNumbers=TRUE, stemWords=TRUE)
ctm <- CTM(matrix, k = numTopics)
data("NYTimes", package = "RTextTools")
data <- NYTimes[sample(1:3100,size=1000,replace=FALSE),]
matrix <- create_matrix(data$comments, language="english", removeNumbers=TRUE, stemWords=TRUE)
data("NYTimes", package = "RTextTools")
data <- NYTimes[sample(1:3100,size=1000,replace=FALSE),]
matrix <- create_matrix(data$comments, language="english", removeNumbers=TRUE, stemWords=TRUE)
matrix <- create_matrix(data$Subject, language="english", removeNumbers=TRUE, stemWords=TRUE)
matrix <- create_matrix(data$Subject, language="english", removeNumbers=TRUE, stemWords=TRUE, weighting=weightTf)
matrix <- create_matrix(data$Subject, language="english", removeNumbers=TRUE, stemWords=TRUE)
ctm <- CTM(matrix, k = numTopics)
ctm <- CTM(matrix, k = 2)
unique(data$Subject)
data <- NYTimes[sample(1:3100,size=100,replace=FALSE),]
matrix <- create_matrix(data$Subject, language="english", removeNumbers=TRUE, stemWords=TRUE)
ctm <- CTM(matrix, k = 2)
data <- NYTimes[sample(1:3100,size=100,replace=FALSE),]
matrix <- create_matrix(data$Subject, language="english", removeNumbers=TRUE, stemWords=TRUE)
ctm <- CTM(matrix, k = 2)
data <- NYTimes[sample(1:3100,size=3000,replace=FALSE),]
matrix <- create_matrix(data$Subject, language="english", removeNumbers=TRUE, stemWords=TRUE)
ctm <- CTM(matrix, k = 2)
data <- read.csv('opiates_comments_11-16-15_more.csv')
matrix <- create_matrix(data$comments, language="english", removeNumbers=TRUE, stemWords=TRUE)
matrix
ctm <- CTM(matrix, k = 2)
rowTotals <- apply(matrix , 1, sum) #Find the sum of words in each row
matrix <- matrix[rowTotals> 0, ]
ctm <- CTM(matrix, k = 2)
ctm_posterior <- posterior(ctm)
topterms_by_topic <- NULL
for (topic in numTopics:1){ #go in reverse order so first column in topterms_by_topic will correspond to the first topic
ctm_posterior_terms <- exp(ctm_posterior$terms[topic,])-1 #convert from log space
topterms_by_topic$terms <- cbind(topterms_by_topic$terms,names(sort(ctm_posterior_terms, decreasing=TRUE)[1:topNterms]))
topterms_by_topic$probs <- cbind(topterms_by_topic$probs,sort(ctm_posterior_terms, decreasing=TRUE)[1:topNterms])
}
rownames(topterms_by_topic$probs) <- NULL #nullify the misleading row names
ctm_posterior <- posterior(ctm)
ctm_posterior
topterms_by_topic <- NULL
numTopics
#Run CTM with number of topics pre-specified
ctm <- CTM(matrix, k = numTopics)
#find top N terms for each topic
ctm_posterior <- posterior(ctm)
topterms_by_topic <- NULL
for (topic in numTopics:1){ #go in reverse order so first column in topterms_by_topic will correspond to the first topic
ctm_posterior_terms <- exp(ctm_posterior$terms[topic,])-1 #convert from log space
topterms_by_topic$terms <- cbind(topterms_by_topic$terms,names(sort(ctm_posterior_terms, decreasing=TRUE)[1:topNterms]))
topterms_by_topic$probs <- cbind(topterms_by_topic$probs,sort(ctm_posterior_terms, decreasing=TRUE)[1:topNterms])
}
rownames(topterms_by_topic$probs) <- NULL #nullify the misleading row names
topterms_by_topic
data <- read.csv('opiates_comments_11-16-15_more.csv')
#create the matrix for the CTM
matrix <- create_matrix(data$comments, language="english", removeNumbers=TRUE, stemWords=TRUE)
critical_term <- "heroin" #make this heroin
ctm <- CTM(matrix, k = numTopics)
#find top N terms for each topic
ctm_posterior <- posterior(ctm)
topterms_by_topic <- NULL
for (topic in numTopics:1){ #go in reverse order so first column in topterms_by_topic will correspond to the first topic
ctm_posterior_terms <- exp(ctm_posterior$terms[topic,])-1 #convert from log space
topterms_by_topic$terms <- cbind(topterms_by_topic$terms,names(sort(ctm_posterior_terms, decreasing=TRUE)[1:topNterms]))
topterms_by_topic$probs <- cbind(topterms_by_topic$probs,sort(ctm_posterior_terms, decreasing=TRUE)[1:topNterms])
}
rownames(topterms_by_topic$probs) <- NULL #nullify the misleading row names
topterms_by_topic
data <- read.csv('opiates_comments_11-16-15_more.csv')
matrix <- create_matrix(data$comments, language="english", removeNumbers=TRUE, stemWords=TRUE)
head(data$comments)
matrix
rowTotals <- apply(matrix , 1, sum) #Find the sum of words in each row
matrix <- matrix[rowTotals> 0, ]
matrix
ctm <- CTM(matrix, k = numTopics)
ctm_posterior <- posterior(ctm)
ctm_posterior
head(ctm_posterior)
head(ctm_posterior$terms)
data <- NULL
setwd('C:/Users/CHATHC01/Documents/D3Project/Spivack/Tasks/Stimscrape')
data <- read.csv('opiates_comments_11-16-15_more.csv')
matrix <- NULL
matrix <- create_matrix(data$comments, language="english", removeNumbers=TRUE, stemWords=TRUE)
rowTotals <- apply(matrix , 1, sum) #Find the sum of words in each row
matrix <- matrix[rowTotals> 0, ]
#Run CTM with number of topics pre-specified
ctm <- CTM(matrix, k = numTopics)
ctm_posterior <- posterior(ctm)
topterms_by_topic <- NULL
for (topic in numTopics:1){ #go in reverse order so first column in topterms_by_topic will correspond to the first topic
ctm_posterior_terms <- exp(ctm_posterior$terms[topic,])-1 #convert from log space
topterms_by_topic$terms <- cbind(topterms_by_topic$terms,names(sort(ctm_posterior_terms, decreasing=TRUE)[1:topNterms]))
topterms_by_topic$probs <- cbind(topterms_by_topic$probs,sort(ctm_posterior_terms, decreasing=TRUE)[1:topNterms])
}
rownames(topterms_by_topic$probs) <- NULL #nullify the misleading row names
matrix
matrix <- create_matrix(data$comments, language="english", removeNumbers=TRUE, stemWords=TRUE)
matrix <- create_matrix(data$comments, language="english", removeNumbers=TRUE, stemWords=FALSE)
rowTotals <- apply(matrix , 1, sum) #Find the sum of words in each row
matrix <- matrix[rowTotals> 0, ]
head(nchar(data$comments))
head(data$comments)
head(nzchar(data$comments))
class(data$comments)
head(as.character(data$comments))
head(nchar(as.character(data$comments)))
data <- as.character(data$comments)
matrix <- NULL
matrix <- create_matrix(data, language="english", removeNumbers=TRUE, stemWords=FALSE)
matrix <- create_matrix(data, language="english", removeNumbers=TRUE, stemWords=TRUE, weighting=tm::weightTf)
head(substr(data,1,255))
head(substr(data,1,5))
head(data.rfind(" "))
?str.rfind
?rfind
?str.rfind
head(data)
data
data <- head(substr(data,1,5))
data
data.rfind(" ")
list.of.packages <- c("topicmodels","RTextTools","desctools")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
lapply(list.of.packages, require, character.only = TRUE)
rm(list=ls())
#Install necessary packages
list.of.packages <- c("topicmodels","RTextTools","desctools")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
lapply(list.of.packages, require, character.only = TRUE)
#user-specified parameters
numTopics <- 3
critical_term <- "heroin" #make this heroin
topNterms <- 10
#load corpus
data("NYTimes", package = "RTextTools")
data <- NYTimes[sample(1:3100,size=3000,replace=FALSE),]
setwd('C:/Users/CHATHC01/Documents/D3Project/Spivack/Tasks/Stimscrape')
data <- read.csv('opiates_comments_11-16-15_more.csv')
#create the matrix for the CTM
data <- as.character(data$comments)
data <- head(substr(data,1,5)) #limit to first 255 characters for limitatio in stemming
strpos(data)
